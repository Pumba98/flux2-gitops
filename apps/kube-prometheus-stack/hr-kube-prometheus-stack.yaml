---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
spec:
  interval: 5m
  chart:
    spec:
      chart: kube-prometheus-stack
      version: 69.4.1
      sourceRef:
        kind: HelmRepository
        name: prometheus-charts
        namespace: flux-system
      interval: 5m
  install:
    crds: CreateReplace
  upgrade:
    crds: CreateReplace
  dependsOn:
    - name: longhorn
      namespace: longhorn-system
  values:
    prometheus-node-exporter:
      tolerations:
        - effect: NoSchedule
          operator: Exists
        - effect: NoExecute
          operator: Exists
    prometheusOperator:
      createCustomResource: false
    kubeControllerManager:
      enabled: false
    kubeScheduler:
      enabled: false
    kubeEtcd:
      enabled: false
    kubeProxy:
      enabled: false
    alertmanager:
      image:
        registry: quay.io
        repository: prometheus/alertmanager
        tag: v0.28.0@sha256:d5155cfac40a6d9250ffc97c19db2c5e190c7bc57c6b67125c94903358f8c7d8
      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: "nginx-external"
        annotations:
          external-dns.alpha.kubernetes.io/target: "${SECRET_GATEWAY}"
          kubernetes.io/tls-acme: "true"
          nginx.ingress.kubernetes.io/auth-url: http://authelia.networking.svc.cluster.local/api/authz/auth-request
          nginx.ingress.kubernetes.io/auth-signin: https://auth.${SECRET_DOMAIN}
        hosts:
        - "alert-manager.${SECRET_DOMAIN}"
        tls:
        - secretName: alertmanager-tls
          hosts:
          - "alert-manager.${SECRET_DOMAIN}"
      config:
        global:
          slack_api_url: "${SECRET_ALERT_MANAGER_DISCORD_WEBHOOK}"
          resolve_timeout: 5m
        receivers:
        - name: 'null'
        - name: 'discord'
          slack_configs:
          - channel: '#prometheus'
            icon_url: https://avatars3.githubusercontent.com/u/3380462
            username: 'Prometheus'
            send_resolved: true
            # https://github.com/onedr0p/home-cluster/blob/main/cluster/apps/monitoring/kube-prometheus-stack/helm-release.yaml#L33
            title: |-
              [{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ if ne .CommonAnnotations.summary ""}}{{ .CommonAnnotations.summary }} {{ else if ne .CommonAnnotations.message ""}}{{ .CommonAnnotations.message }} {{ else if ne .CommonAnnotations.description ""}}{{ .CommonAnnotations.description }} {{ else }}{{ .CommonLabels.alertname }}{{ end }}
            text: >-
              {{ range .Alerts -}}
                **Alert:** {{ .Annotations.title }}{{ if .Labels.severity }} `{{ .Labels.severity }}`{{ end }}
              {{ if ne .Annotations.summary ""}}**Summary:** {{ .Annotations.summary }} {{ else if ne .Annotations.message ""}}**Message:** {{ .Annotations.message }} {{ else if ne .Annotations.description ""}}**Description:** {{ .Annotations.description }}{{ end }}
                **Details:**
                {{ range .Labels.SortedPairs }} â€¢ {{ .Name }}: `{{ .Value }}`
                {{ end }}
              {{ end }}
        route:
          group_by: ['...'] #['alertname', 'job']
          group_wait: 30s
          group_interval: 5m
          repeat_interval: 6h
          receiver: 'discord'
          routes:
          - receiver: 'null'
            matchers:
            - severity =~ "none"
          - receiver: 'discord'
    grafana:
      enabled: true
      image:
        repository: grafana/grafana
        tag: 11.5.2@sha256:8b37a2f028f164ce7b9889e1765b9d6ee23fec80f871d156fbf436d6198d32b7
      admin:
        existingSecret: grafana-secrets
      envFromSecret: grafana-secrets
      grafana.ini:
        server:
          root_url: https://grafana.${SECRET_DOMAIN}
        auth:
          disable_login_form: true
          oauth_auto_login: true
        # auth.anonymous:
        #   enabled: false
        # auth.basic:
        #   enabled: false
        auth.generic_oauth:
          enabled: true
          name: Authelia
          icon: signin
          client_id: wCDESryfxgaEQUrgISZWrcNgNQCCUL3u1PZulzpSTaRvkQTpN4CQvrWx6RTa69flzhonmC5p
          #client_secret: 
          scopes: openid profile email groups
          empty_scopes: false
          auth_url: https://auth.${SECRET_DOMAIN}/api/oidc/authorization
          token_url: https://auth.${SECRET_DOMAIN}/api/oidc/token
          api_url: https://auth.${SECRET_DOMAIN}/api/oidc/userinfo
          login_attribute_path: preferred_username
          groups_attribute_path: groups
          name_attribute_path: name
          use_pkce: true
          role_attribute_path: contains(groups, 'admins') && 'GrafanaAdmin' || 'Viewer'
          allow_assign_grafana_admin: true
      dashboardProviders:
        dashboardproviders.yaml:
          apiVersion: 1
          providers:
          - name: "default"
            orgId: 1
            folder: ""
            type: file
            disableDeletion: false
            editable: true
            options:
              path: /var/lib/grafana/dashboards/default
      plugins:
        - grafana-piechart-panel
      dashboards:
        default:
          # # Ref: https://grafana.com/grafana/dashboards/13502
          # minio:
          #   gnetId: 13502
          #   revision: 10
          #   datasource: Prometheus
          flux-cluster:
            url: https://raw.githubusercontent.com/fluxcd/flux2/main/manifests/monitoring/monitoring-config/dashboards/cluster.json
            datasource: Prometheus
          flux-control-plane:
            url: https://raw.githubusercontent.com/fluxcd/flux2/main/manifests/monitoring/monitoring-config/dashboards/control-plane.json
            datasource: Prometheus
          ingress-nginx:
            gnetId: 9614
            revision: 1
            datasource: Prometheus
          certificate-exporter:
            gnetId: 13922
            revision: 1
            datasource: Prometheus
          cert-manager:
            gnetId: 11001
            revision: 1
            datasource: Prometheus
          redis:
            gnetId: 11835
            revision: 1
            datasource: Prometheus
          postgresql:
            gnetId: 9628
            revision: 7
            datasource: Prometheus
      sidecar:
        dashboards:
          enabled: true
          searchNamespace: ALL
        datasources:
          enabled: true
          searchNamespace: ALL
      serviceMonitor:
        enabled: true
      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: "nginx-external"
        annotations:
          external-dns.alpha.kubernetes.io/target: "${SECRET_GATEWAY}"
          kubernetes.io/tls-acme: "true"
          nginx.ingress.kubernetes.io/auth-url: http://authelia.networking.svc.cluster.local/api/authz/auth-request
          nginx.ingress.kubernetes.io/auth-signin: https://auth.${SECRET_DOMAIN}
        hosts:
        - "grafana.${SECRET_DOMAIN}"
        tls:
        - secretName: grafana-tls
          hosts:
          - "grafana.${SECRET_DOMAIN}"
    prometheus:
      image:
        registry: quay.io
        repository: prometheus/prometheus
        tag: v3.2.0@sha256:5888c188cf09e3f7eebc97369c3b2ce713e844cdbd88ccf36f5047c958aea120
      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: "nginx-external"
        annotations:
          external-dns.alpha.kubernetes.io/target: "${SECRET_GATEWAY}"
          kubernetes.io/tls-acme: "true"
          nginx.ingress.kubernetes.io/auth-url: http://authelia.networking.svc.cluster.local/api/authz/auth-request
          nginx.ingress.kubernetes.io/auth-signin: https://auth.${SECRET_DOMAIN}
        hosts:
        - "prometheus.${SECRET_DOMAIN}"
        tls:
        - secretName: prometheus-tls
          hosts:
          - "prometheus.${SECRET_DOMAIN}"
      prometheusSpec:
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        retention: 7d
        storageSpec:
          volumeClaimTemplate:
            spec:
              resources:
                requests:
                  storage: 25Gi
        # additionalScrapeConfigs:
        # - job_name: node-exporter
        #   honor_timestamps: true
        #   static_configs:
        #   - targets:
        #     - "192.168.1.10:9100"
        #     - "192.168.1.11:9100"
        #     - "192.168.1.15:9100"
  valuesFrom:
  - kind: ConfigMap
    name: flux-kube-state-metrics-config
    valuesKey: kube-state-metrics-config.yaml
